1. 서브쿼리(SubQuery) 
    1) 하나의 SQL문안에 포함되어 있는 또 다른 SQL문을 말함 .
        - 하나의 SQL문으로 요구사항을 해결할수 없는, 
          조금 더 복잡한 데이터를 추출할때 사용.

    2) 조인 
        - 조인에 참여하는 모든 테이블이 대등한 관계에 있기 때문에
        - 모든 테이블의 컬럼을 어떤 위치에서라도 자유롭게 사용가능.
       서브쿼리는 
        - 메인 쿼리의 컬럼을 모두 사용할 수 있지만
        - 메인 쿼리는 서브 쿼리의 컬럼을 사용할수 없음.  

    3) 서브쿼리 사용시 주의점             
        - 서브쿼리를 괄호로 감싸서 사용함 
        - 서브 쿼리는 단일 행(Single Row) 또는 복수 행(Multiple Row)
          비교 연산자와 함께 사용 가능 
            - 단일 행 비교 연산자는 서브쿼리의 결과가 반드시 1건 이하이여함
            - 복수 행 비교 연산자는 서브쿼리의 결과 건수와 상관이 없음
        - 서브쿼리에서는 ORDER BY를 사용하지 못함 
            - ORDER BY절은 SELECT절에서 오직 한 개만 올수 있기때문에
              ORDER BY절은 메인 쿼리의 마지막 문장에 위치해야 함.

    4) 서브 쿼리가 사용 가능한 위치 
        - SELECT절 - FROM절 - WHERE절 - HAVING절 - ORDER BY절 
        - INSERT문의 VALUE절 
        - UPDATE절의 SET절 

    5) 반환 형태에 따른 서브쿼리 분류 
        - 단일 행 서브 쿼리
            - 서브 쿼리의 실행 결과가 항상 1건 이하인 서브쿼리를 의미함.
            - 항상 비교 연산자와 함께 사용됨 
            - =, <, <=, >, >=, <> 
        - 다중 행 서브 쿼리 
            - 서브 쿼리의 실행 결과가 여러 건인 서브쿼리를 의미함.
            - 다중 행 서브 쿼리는 다중 행 비교 연산자와 함께 사용됨
            - IN, EXISTS 
                - 결과값 중에 있는 것 중에서의 의미 
                - IN은 전체 레코드를 스캔하고,
                  EXISTS는 존재여부만 확인하고 스캔하지 않음(상대적으로 속도 빠름)
                - 존재하는 TRUE / 존재하지 않으면 FALSE   

    6) 사용 위치에 따른 서브쿼리 분류 
        1) 중첩 서브쿼리 
            - WHERE절 
        2) 인라인 뷰
            - FROM절            
            - FROM절 내에 존재하는 서브쿼리를 인라인 뷰 서브쿼리라고 함 
        3) 스칼라 서브쿼리 
            - SELECT절
            - SELECT절 내에 존재하는 서브쿼리를 스칼라 서브쿼리라고 함                
                                                                  
2. 윈도우 함수 (WINDOW FUNCTION)                                                                  
    1) 행과 행간의 관계에서 다양한 연산 처리를 할수 있는 함수
    2) 분석함수로도 알려져 있음 (ANSI 표준은 윈도우 함수임)
    3) 윈도우함수는 일반 함수와 달리 중첩하여 호출 될수는 없음 
    4) 종류 
        - 집계관련함수     
            - COUNT()
            - AVG()
        - 순위관련함수    
            - RANK()
            - DENSE_RANK()
            - ROW_NUMBER()         
    5) 문법 

        SELECT
                윈도우함수(인자) OVER (PARTITION BY 컬럼 ORDER BY 컬럼)
        FROM 테이블명 
        ;  

        - PARTITION BY
            - FROM절 이하에서 나온 결과집합을 특정 컬럼(들)을 기준으로
              그룹화할 수 있음. 
              - 전체 직원 정보를 출력하면서 각 직원이 속한 부서별로
                그룹화 할수 있음. 