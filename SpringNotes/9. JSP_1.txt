1. 소개 
    1) 동적인 웹 페이지를 개발하기 위한 웹 프로그래밍 기술 
    2) 짧은 코드로 동적인 웹 페이지를 생성할수 있음 
    3) 기본적인 예외는 자동으로 처리됨 
    4) 스레드 기반으로 실행되어 시스템 자원은 절약해 줌 

2. 주요 차이 

        서블릿                         JSP 
     -----------------------------------------------------------------------
       자바 코드안에서 전체 html       html 코드안에서 필요한 부분만
       페이지를 생성                  자바코드를 스크립트 형태로 추가함  

       변수 선언 및 초기화는 반드시     내장 객체로 제공하여 즉시 사용할수 있음 
       선행되어야 함 

       컨트롤러(Controller)를 만들때   처리된 결과를 보여주는 뷰(View)
       사용                           만들때 사용

3. 스크립트 요소(Script Elements)
    1) JSP에서 자바 코드를 직접 작성할수 있음
        - 선언부, 표현식, 스크립틀릿   
    2) 선언부(Declaration)
        - 스크립틀릿이나 표현식에서 사용할 멤버변수나 메서드 선언함
        - <%! 변수, 메서드 선언 %>      
    3) 스크립틀릿 (Scriptlet)  
        - JSP 페이지가 요청을 받았을 때 실행되어야 할 자바 코드를 
          작성하는 영역임   
        - <% 자바코드 %>    
    4) 표현식(Expression)               
        - 변수의 값을 웹 브라우저 화면에 출력할 때 사용함 
        - <%= 자바 표현식 %>

4. 지시어 (Directive, 디렉티브)
    1) JSP 페이지를 자바(서블릿)코드로 변환하는 데 필요한 정보를 
       JSP엔진에 알려줌 
    2) <%@ 지시어 속성1="값1"  속성2="값2"%>    
    3) 지시어 종류
        - page 지시어 : JSP 페이지에 대한 정보 설정함 
        - taglib 지시어 : jstl 선언함  
        - include 지시어 : 외부 파일을 현재 JSP 페이지에 포함시킴 

5. JSP 기본 객체
    0) 컨테이너가 미리 선언해 놓은 참조 변수 
        - 별도의 객체 생성없이 각 내장 객체의 메서드를 사용할수 있음 
    1) request        javax.servlet.http.HttpServletRequest  
    2) response       javax.servlet.http.HttpServletResponse    
    3) session        javax.servlet.http.HttpSession   
    4) application    javax.servlet.ServletContext 
    5) out            javax.servlet.jsp.JspWriter
    6) pageContext    javax.servlet.jsp.PageContext 

6. 내장 객체의 유효 영역(Scope)   
    0) HTTP특징의 상태정보 저장하지 않음(stateless)
        - 저장소가 필요 (stateful)
        - 상태 정보 저장
    1) page 영역 
        - 동일한 페이지에서만 공유됨 
        - 페이지를 벗어나면 소멸됨 
    2) request 영역
        - 하나의 요청에 의해 호출된 페이지와 포워드(요청 전달)된 
          페이지까지 공유됨 
    3) session 영역 
        - 클라이언트가 처음 접속한 후 웹 브라우저를 닫을 때까지 공유됨 
    4) application 영역
        - 한 번 저장되면 웹 애플리케이션이 종료될 때까지 유지됨                       

7. 4개 저장소 
    1) 저장소는 Map 형태 (key:속성, value:속성값)
    2) Map에 읽기, 쓰기 가능 
        - 읽기 : getAttribute(String name)
        - 쓰기 : setAttribute(String name, Object object)
        - 삭제 : removeAttribute(String name)
    3) pageContext
        - JSP에 존재
        - local variable을 저장 (request, response 등)
        - 각 페이지안에서만 접근(읽기, 쓰기) 가능     
        - 다른 페이지에서 접근 불가 
        - 요청(request)할 때마다 초기화 됨    
    4) request
        - 요청마다 독립적임
            - request 객체가 가지고 있는 Map이 요청할 때마다 하나씩 생김
        - 생존 기간 : 요청이 처리되는 동안에만 존재 
        - forward
            - 특정 페이지에서 다른 페이지로 넘기는 것
            - request객체에 데이터를 저장해서 a.jsp에서 b.jsp로 전달 가능.
        - 서버측 부담이 제일 적음    
    5) session
        - 클라이언트마다 각각 1개씩 있는 개별 저장소 
        - 클라이언트가 웹 브라우저를 최초로 열고난 후
          닫을 때까지 요청되는 모든 페이지는 session 객체를 공유.
        - 생존 기간 : 로그인에서 로그아웃까지 
        - 로그인 시 각 클라이언트마다 따로 1개씩 있으므로
          각각의 id를 저장해서 클라이언트를 구별  
        - 로그인하면 session이 생겼다가 로그아웃하면 제거됨  
        - id, 장바구니 같이 각 사용자의 개별 정보를 담음 
        - 사용자마다 1개씩 갖기 때문에 최소한의 데이터만 저장해야함 
        - 서버 부담이 제일 큼    
    6) application
        - 접근 범위 : WebApp (ServletContext) 전체에서 접근 가능  
        - 공통 저장소로 단 1개만 존재함
        - 어느 곳에서든 읽기, 쓰기가 가능                    


8. DTO(데이터 전송 객체)
    1) 데이터를 저장하거나 전송하는데 쓰이는 객체 
    2) 로직 없이 순수하게 데이터만 담고 있음 
    3) VO(Value Object)    
    4) DTO는 자바빈즈 규약에 따라 작성함 
        - 기본(default) 패키지 이외의 패키지에 속해야 함 
        - 멤버 변수(속성)의 접근 지정자는 private으로 선언해야 함 
        - 기본 생성자가 있어야 함
        - 멤버 변수에 접근할 수 있는 게터/세터메서드가 반드시 있어야 함
        - 게터/세터 메서드의 접근 지정자는 public으로 선언해야 함 
