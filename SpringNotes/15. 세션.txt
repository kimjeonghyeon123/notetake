1. 세션(session) 소개
    1) 서로 관련된 요청(request)들을 하나로 묶은 것
        - 쿠키를 이용
        - browser마다 개별 저장소(session 객체)를 서버에 제공(1:1)

            - 쿠키 : 브라우저에 저장
            - 세션 : 서버에 저장

    2) 쿠키는 정보를 클라이언트에 저장한 후 네트워크로 주고받기 때문에
       민감한 정보를 다루기엔 위험함
    
    3) 세션은 서버가 직접 관리하므로 민감한 정보를 다루기에 더 적합함
        - 로그인 정보 유지
    
    4) 세션이란?
        (1) 클라이언트가 웹 브라우저를 통해 서버에 접속한 후
        (2) 용무를 처리하고
        (3) 웹 브라우저를 닫아 서버와의 접속을 종료하는 하나의 단위

    5) 세션은 클라이언트가 서버에 접속해 있는 동안 그 상태를 유지하는 것이 목적임

    6) 로그인 ~ 로그아웃까지 하나의 세션이라고 할 수 있음

    7) 클라이언트가 처음 접속한 후 웹 브라우저를 닫을 때까지 공유함
        - 포워드나 페이지를 이동하는 경우 세션 영역은 소멸되지 않음

    8) 세션은 브라우저마다 저장됨
        - 같은 PC라도 다른 브라우저라면 다른 세션ID를 저장함

2. 세션 설정, 확인, 삭제
    1) 유지 시간 설정
        - 세션은 웹 브라우저를 실행할 때마다 새롭게 생성됨
        - 생성된 세션은 설정된 유지 시간동안 유지됨
            - 유지 시간이 만료되기 전에 새로운 요청이 들어오면 수명이 계속 연장됨
        - 만료 때까지 클라이언트가 아무런 요청을 하지 않거나 웹 브라우저를 닫으면 삭제됨
        - 방법 2가지
            - web.xml에서 설정
                - 분 단위로 설정
            - session.setMaxInactiveInterval(int interval)
                - 초 단위로 설정
    
    2) 설정값 확인
        - JSESSIONID
            - 클라이언트가 생성한 것이 아님
            - 톰캣 컨테이너에서 새로운 웹 브라우저가 접속하면 세션을 유지하기 위해 자동으로 생성됨
            - JSESSIONID는 요청을 보낸 웹 브라우저가 현재 연결되어 있는지(세션이 살아있는지) 확인하는데 이용됨
    
    3) 세션 삭제
        - 웹 브라우저를 닫으면 종료됨
        - 웹브라우저 설정에서 모든 쿠키 삭제해 세션을 삭제하는 방법도 있음
        
3. 동작 방식
    1) 웹 브라우저가 처음 접속하면 서버(톰캣)는 세션을 새로 생성함
       응답 시 세션 아이디를 값으로 갖는 JSESSIONID 쿠키를 
       응답 헤더(response header)에 담아 웹 브라우저에 보냄
    
    2) 웹 브라우저는 재요청 시마다 JSESSIONID를 요청 헤더(request header)에 추가하여 보냄

    3) 서버는 요청 헤더에 포함된 JSESSIONID로 해당 요청이 기존 세션에서 이어진 것임을 알게 됨

    