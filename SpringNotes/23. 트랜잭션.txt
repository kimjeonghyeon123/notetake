1. 트랜잭션(Transaction)
    1) DBMS에서 하나의 작업 단위를 의미함
        - 더 이상 나눌 수  없는 작업의 단위
        - insert, update, select 명령어 하나하나가 transaction
    2) 하나의 계좌에 대해 서로 다른 두 곳에서 동시에 돈을 인출한다면 어떻게 될까?
        - 두 트랜잭션을 모두 거부하거나, 더 빠르게 호출된 요청을 처리하는 것이 합당함
    3) 계좌 이체
        - 출금과 입금, 이 전체를 하나의 Tx로 묶어야 됨
        - 둘 다 성공하지 않으면 트랜잭션 이전 상태로 rollback을 해야함

2. 트랜잭션의 네가지 특성
    1) 원자성(Atomicity)
        - 트랜잭션에 포함된 연산들을 모두 처리하거나, 모두 처리하지 않아야 함
    2) 일관성(Consistency)
        - 트랜잭션이 수행된 이후에도 DB 내의 데이터는 일관된 상태를 유지함
    3) 격리성(Isolation)
        - 하나의 트랜잭션이 끝날 때까지 다른 트랜잭션이 간섭할 수 없음
        - 독립적임
    4) 지속성(Durablility)
        - 트랜잭션이 성공적으로 완료된 이후에 데이터들이 영구적으로 보존됨

3. 트랜잭션의 Commit과 Rollback
    1) Commit
        - 하나의 트랜잭션이 성공적으로 수행되었음을 명시하기 위해 사용함
        => 하나의 트랜잭션이 성공적으로 끝났다면,
           데이터베이스가 일관성 있는 상태를 유지하게 됨

    2) Rollback
        - 트랜잭션이 비정상적으로 종료되어, DB의 일관성을 유지하기 어려울 때 사용함
        => 원자성을 유지하기 위하여 해당 트랜잭션에 포함된 모든 연산을 취소함
        => 해당 트랜잭션의 일부가 정상적으로 처리되었더라도 모든 연산을 이전으로 되돌림
    
    3) 자동 커밋
        - 명령 실행 후 자동으로 commit 수행(rollback 불가)
    
    4) 수동 커밋
        - 명령 실행 후 명시적으로 commit 또는 rollback 입력

    5) 둘 이상의 트랜잭션으로 구성된 경우는 수동 커밋으로 설정해야 수정이 가능해짐

4. 트랜잭션 사용 시 유의사항
    1) 필요한 작은 단위의 코드 위주로 트랜잭션을 사용하는 것을 권장함
    2) 기본적으로 DMBS 입장에서 사용자 연결(Connection)의 수가 많으면 서버 부담이 커질 수 있음
    3) 트랜잭션을 처리하기 위한 커넥션 유지 기간이 길어지면, 
       전반적인 각 프로그램의 대기 시간이 과도하게 길어질 수 있음

5. Tx(Transaction)의 Isolation 레벨(각 Tx를 고립, 격리시키는 정도)
    1) read uncommited
        - 커밋되지 않은 데이터도 읽기 가능
    2) read commited
        - 커밋된 데이터만 읽기 가능
        - 커밋된 트랜잭션의 영향을 받아서 데이터가 갑자기 나타남
          (phantom read)
    3) repeatable read (default 값)
        - Tx이 시작된 이후의 변경은 무시함
        - 변경을 하는 동안 반영이 안되다가 커밋 이후에 Tx 반영됨




















