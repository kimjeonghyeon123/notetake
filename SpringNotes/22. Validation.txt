1. Validation
    1) 유효성 검증
        - 사용자 또는 서버에 요청(request) 내용에서
          잘못된 내용이 있는지 확인하는 단계
    
    2) 데이터 검증
        - 필수 데이터의 존재 유무
        - 문자열의 길이나 숫자형 데이터 값의 범위 
        - email, 신용카드, data 등 특정 형식에 맞춘 데이터

2. Spring의 validation
    1) 스프링은 웹 레이어에 종속적이지 않은 방법으로 validation을 함
    2) Validator 인터페이스 구현(Implements)을 통한 validation
        - 객체를 검증하기 위한 인터페이스
        - 객체 검증기(Validator) 구현에 사용
            - public boolean supports(Class<?> clazz)
                - Validator가 동작할 조건을 정의, 주로 class의 타입을 비교
            - public void validate(Object target, Errors errors)
                - 원하는 검증을 진행함
                - 객체를 검증하는 메서드
                    - Object target
                        - 검증할 객체
                    - Errors errors
                        - 검증 시 발생한 에러 저장소
                        - void reject(String errorCode)
                        - void rejectValue(String field, String errorCode)
                        - void rejectValue(String field, String errorCode, String defaultMessage)
                            - feild : 에러 발생 필드
                            - errorCode : 해당 에러에 대한 에러코드
                            - defaultMessage : 해당 에러에 대한 default 메시지
    3) Validator를 검증기(validator)로 등록
        - WebDataBinder를 이용
            - 데이터 검증
            - 타입 변환
            - BindingResult

4. Data Binding
    1) 사용자나 외부 서버의 요청 데이터를 특정 도메인 객체(DTO)에 저장해서
       저장해서 웹 프로그램에 Request에 담아 주는 것을 뜻함

5. MessageSource
    1) 다양한 리소스(파일, 배열)에서 메시지를 읽기 위한 인터페이스
        
    2) 
    3) 
