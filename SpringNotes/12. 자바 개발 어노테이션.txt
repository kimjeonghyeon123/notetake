1. 어노테이션
    1) 자바에서 특별한 의미나 역할, 기능을 수행할 수 있도록 해주는 역할
    2) 스프링 프레임워크를 사용할 때 필수적으로 사용됨 

2. 기본 Web 개발 어노테이션 
    0) @SpringBootApplication
        - 스프링 부트 어플리케이션을 실행해주는 역할 
        - 설정, 자동 설정, 컴포넌트 스캔 

    1) @Component
        - 해당 클래스가 스프링의 컴포넌트로 등록됨을 나타냄 
        - 일반적으로 개발자가 만든 클래스를 객체(Bean)로 등록시 사용 
        - <component-scan>로 @Component로 설정된 클래스를 
          자동 검색해서 빈으로 등록함 

    2) @Controller
        - 해당 클래스 Controller 역할을 한다는 것을 나타냄 
        - 일반적으로 요청을 받아서 처리하고 응답하는 역할 

    3) @Service 

    4) @Repository          



3. API 개발 관련 어노테이션 
    0) @RestController
      - REST API를 만들기 위한 Controller 어노테이션 
      - 일반적으로 요청을 받아서 처리하고 응답하는 역할 
    1) @GetMapping
      - GET 요청을 처리하기 위한 메서드 지정 
    2) @PostMapping
      - POST 요청을 처리하기 위한 메서드 지정



4. 클라이언트 요청/응답 파라미터 관련 어노테이션 
    1) @RequestMapping(value = 패스)
        - 클라이언트에서 들어온 요청이 value의 패스와 동일하면
          해당 클래스나 메서드를 실행 
        - 클래스 단위에서 사용 가능 
        - 메서드 단위에서 사용 가능 

        - URL 패턴 (Servlet과 유사함) ①②③④⑤
          - ① exact mapping : 정확히 일치 
          - ② path mapping : 경로 맵핑
          - ③ extension mapping : 확장자 맵핑 
          - ?는 한글자, *는 여러 글자, **는 하위 경로 포함 

    2) @RequestParam
        - 요청의 파라미터 내용을 받는데 사용됨   
        - 클라이언트의 요청 파라미터 내용을 
          메서드의 파라미터와 매핑해주는 역할 
          - 요청의 파라미터를 연결할 매개변수에 붙이는 어노테이션  

        - @RequestParam(required = false)는 필수입력X
          @RequestParam(required = true)는 필수입력     

        - 메서드의 매개변수 타입이 String일때 
        - 메서드의 매개변수 타입이 int일때 

    3) @ModelAttribute
        - Model의 속성으로 자동 추가해주는 어노테이션 
        - key값을 생략하면, 타입의 첫글자를 소문자로해서 key로 함 
        - 컨트롤러 메서드의 매개변수와 반환타입에 적용 가능
            - 호출과 저장이 필요없게 됨 

5. Bean 의존관계 주입 Annotation
    1) @Autowired
      - 의존하는 객체를 자동으로 주입해 주는 어노테이션
      - 프로퍼티, setter 메서드, 생성자, 일반메서드에 적용 가능함 
      - 의존하는 객체를 주입할 때 주로 Type을 이용하게 됨 
        - 타입으로 먼저 검색, 여러개면 이름으로 검색 

    2) @Value
      - 단순한 값을 주입할 때 사용하는 어노테이션
      - <property name="" value="" /> 와 동일한 역할을 함 

    3) @Qualifier      
      - @Autowired 어노테이션과 같이 사용되는 어노테이션 
      - @Autowired는 타입으로 찾아서 주입하므로, 동일한 타입의 Bean 
        객체가 여러 개 존재할 때, 특정 Bean을 찾기 위해서는 
        @Qualifier 를 같이 사용해야 함.

    4) @Resource 
      - 애플리케이션에서 필요로 하는 자원을 자동 연결할 떼 사용됨.
      - 의존하는 객체를 주입할 때 주로 Name을 이용하게 됨  



6. Bean 등록시 정보 
    1) Bean 이름 
      - 기본적으로 원Class 이름에서 첫문자만 소문자로 변경 
      - 원하는 경우 변경 가능 
    2) Class 경로 
    3) Scope (Bean을 생성하는 규칙)
      - singleton : 컨테이너에 단일로 생성 (default)
      - prototype : 작업시마다 Bean을 새로 생성하고 싶은 경우 
      - request : http요청마다 새롭게 Bean을 생성하고 싶은 경우                    



