1. 관심사의 분리 (Separation of Concern) = MVC 패턴 
    1) 입력, 처리(작업), 출력 3개의 관심사(해야할 작업)를 분리
        - OOP 설계 원칙 
            - 단일 책임의 원칙 
                - 하나의 메서드는 하나의 책임 
        - 분리 
            - 변하는 것 / 자주 변하지 않는 것 분리    
            - 공통 코드 분리 (중복 제거)         

    2) 진행순서  ①②③④⑤⑥⑦⑧⑨⑩
        ① 클라이언트에서 요청이 들어옴 
        ② DispatcherServlet에서 입력을 처리, Model을 생성해서 
          Controller로 보냄 
        ③ Controller에서 처리 후 결과를 Model에 저장해서 
          DispatcherServlet으로 전달 
        ④ DispatcherServlet에서 View로 Model을 전달     
        ⑤ View에서 클라이언트로 응답을 보냄        

2. MVC 패턴 
    1) 웹 애플리케이션은 사용자의 요청을 받아 처리한 후 응답하는 구조임 
    2) MVC는 모델(Model), 뷰(View), 컨트롤러(Controller)의 약자 
    3) 소프트웨어를 개발하는 방법론의 일종임 
    4) 데이터 처리를 담당하는 모델과 
       화면 출력을 담당하는 뷰 
       그리고 이 둘을 제어하는 컨트롤러가 

       각자의 역할을 분담하여 사용자의 요청을 처리한 후 
       결과를 웹 브라우저에 출력하게 됨

    5) 모델 
        - 업무 처리 로직(비즈니스 로직) 혹은
          데이터베이스와 관련된 작업을 담당함 
    6) 뷰
        - JSP 페이지와 같이 사용자에게 보여지는 부분을 담당함 
    7) 컨트롤러
        - 모델과 뷰를 제어하는 역할을 함 
        - 사용자의 요청을 받아서 그 요청을 분석하고,
          필요한 업무 처리 로직(모델)을 호출함
        - 모델이 결과값을 반환하면 출력할 뷰(JSP 페이지)를 선택한 후 전달함           

3. 모델1 구조 & 모델2 구조 
    1) 모델 1 방식에서는 사용자의 요청을 JSP가 받아 모델을 호출함 
       모델이 요청을 처리한 후 결과를 반환하면 JSP를 통해 응답함 
       - JSP에 뷰와 컨트롤러가 혼재됨 
        - 개발 속도가 빠름, 배우기 쉬움 
        - 코드가 복잡해짐, 유지보수가 어려움 
    2) 모델 2 방식 
        - MVC 패턴을 그대로 사용함     
        - JSP는 뷰로 사용하고, 서블릿은 컨트롤러로 사용함 