1. 프로그램에서의 오류
    1) 컴파일 오류
        - 프로그램 코드 작성 중 발생하는 문법적 오류
        - IDE(Intergrated Development Environment)에서 대부분의 컴파일 오류는 detection 됨
        - 실행 오류 (runtime error)
            - 실행 중인 프로그램이 의도하지 않는 동작을 하거나 중지되는 오류
            - 비정상 종료가 되는 경우 시스템의 심각한 장애가 발생할 수 있음

2. 예외 처리
    1) 프로그램이 비정상 종료를 피하여 시스템의 원활하게 실행되도록 함
    2) 오류가 발생한 경우 log를 남겨서 추후 log분석을 통해 그 원인을 파악하여 bug를 수정하는 것이 중요함

3. 오류와 예외
    1) 시스템 오류(error)
        - 개발자가 처리 할 수 없는 오류
            - 예) 동적 메모리가 없는 경우, 스택 메모리 오버플로우 등
    
    2) 예외(Exception)
        - 프로그램에서 제어할 수 있는 오류
            - 예) 읽어들이려는 파일이 존재하지 않거나 또는 네트워크나 DB 연결이 안되는 경우 등
        - 자바는 안정성이 중요한 언어로 대부분의 프로그램에서 발생하는 오류에 대해 문법적으로 예외 처리를 해야함

4. 예외 클래스들
    1) Class Exception
        - 모든 예외 클래스들의 최상위 클래스
    2) 다양한 예외들에 대해 그 처리를 위한 클래스가 제공됨
        - ArithmeticException       : 정수를 0으로 나눈 경우
        - NullPointerException      : 초기화되지 않은 객체를 사용하는 경우
        - IndexOutOfBoundsException : 배열의 크기를 넘어선 위치를 참조하는 경우(ArrayIndexOutOfBoundsException) 
        - FileNotFoundException     : 참조하려는 파일이 지정된 위치에 없는 경우
        - ClassNotFoundException    : 클래스가 로드되지 않은 경우
        - InterruptedException      : thread를 Runnable하게 만들 수 있도록 사용할 수 있음

5. 예외 처리하기
    1) try ~ catch 문
        - try {
            예외가 발생할 수 있는 코드 부분
          } catch(FileNotFoundException e) {
            try블록 안에서 예외가 발생했을 때 처리하는 부분
          } catch(ClassNotFoundException e) {

          } 
          .
          .
          .
          } catch(Exception e) {

          }

        - 하나의 try {} 블록에서 예외가 여러개 발생하는 경우
            - 각각의 예외를 따로 처리할 수도 있음
            - 예외를 묶어서 하나의 방법으로 처리할 수도 있음
            
        - Exception 클래스를 활용하여 default 처리를 할 때 Exception 블록은 맨 마지막에 위치해야 함    
    
    2) try ~ catch ~ finally
        - finally 블록에서 파일을 닫거나 네트워크를 닫는 등의 리소스를 해제 구현을 함
        - try {} 블록이 수행되는 경우, finally {} 블록은 항상 수행됨
        - try {
            예외가 발생할 수 있는 코드 부분
          } catch(Exception e){
            try블록 안에서 예외가 발생했을 때 처리하는 부분
          } finally{
            예외발생여부와 상관없이 항상 수행되는 부분
            주로 자원해제를 함
          }

    3) try-with-resources 문
        - 리소스를 사용하는 경우 close()하지 않아도 자동으로 해제 되도록 함
            - close()를 명시적으로 호출하지 않아도 try{} 블록에서 열린 리소스는 
              정상적인 경우나 예외가 발생한 경우나 모두 자동으로 해제해준다.
        - 자바 7부터 제공되는 구문
            - 리소스를 try() 소괄호 내부에서 선언해야 함
        - 자바 9부터
            - 리소스는 try()외부에서 선언하고 변수만을 try(obj) 처럼 사용할 수 있음
        - 해당 리소스 클래스가 AutoCloseable 인터페이스를 구현해야 함
            - FileInputStream의 경우에는 Autocloseable을 구현하고 있음

6. 예외 처리 미루기
    1) throws를 이용하면 예외가 발생할 수 있는 부분을 사용하는 쪽에서 예외를 처리할 수 있음

7. 사용자 정의 예외 클래스
    1) 구현하기
        - 자바에서 제공되는 예외 클래스 외에 프로그래머가 직접 만들어야 하는 예외가 있을 수 있음
        - 기존 예외 클래스 중 가장 유사한 예외 클래스에서 상속받아 사용자 정의 예외 클래스를 만듦
        - 기본적으로 Exception 클래스를 상속받아 만들 수 있음
        
    2) 예(Case)
        - 패스워드에 대한 예외 처리하기
            - 비밀번호는 null일 수 없음
            - 비밀번호의 길이는 8자 이상
            - 비밀번호는 문자로만 이루어져서는 안된다.(하나이상의 숫자나 특수문자 포함)
            














