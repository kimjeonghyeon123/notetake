0. 멀티태스킹 (multi-tasking)
    1) 하나의 응용 프로그램이 여러 개의 작업(task)을 동시에 처리

1. 프로세스 (Process)
    1) OS(Operating System)는 동시에 여러 개의 프로그램을 실행시킴.
    2) Process
        - 프로그램이 실행 중인 상태
        - 프로그램이 실행 되면 OS로부터 메모리를 할당 받아 프로세스 상태가 됨

2. 쓰레드 (Thread)
    1) 하나의 프로세스는 최소한 하나 이상의 thread를 가지게 됨
    2) 실제 작업(Task)을 수행하는 단위는 thread
    3) 사용자가 작성한 코드로서, JVM에 의해 스케줄링되어 실행되는 단위
    4) 자바의 멀티태스킹 구현은 멀티스레딩만 가능
    5) 하나의 JVM은 하나의 자바 응용프로그램만 실행
        - 자바 응용프로그램이 시작될 때 JVM이 함께 실행 됨
        - 자바 응용프로그램이 종료될 때 JVM도 함계 종료 됨
    6) 하나의 응용프로그램은 하나 이상의 스레드로 구성 가능
        - JVM은 응용프로그램을 실행 시작할 때 스레드 생성
            - main 스레드
        - JVM은 main스레드에게 main()메서드를 실행하도록 함
            - main() 메서드가 종료하면 main 스레드 종료

3. 멀티 스레딩 (Multi-threading)
    1) 여러 thread가 동시에 수행되는 프로그래밍
       여러 작업이 동시에 실행되는 효과
        - 하나의 응용 프로그램은 여러 개의 스레드로 구성 가능
        - 한 스레드가 대기하는 동안 다른 스레드 실행
            - 프로그램 전체적으로 시간 지연을 줄임
    2) thread는 각각 자신만의 작업 공간을 가짐 (context)
        - stack, register
    3) 각 thread 사이에서 공유하는 자원이 있을 수 있음
    4) 여러 thread가 자원을 공유하여 작업이 수행되는 경우
       서로 자원 차지하려는 race condition이 발생할 수 있음
    5) 이렇게 여러 thread가 공유하는 자원 중 경쟁이 발생하는 부분을 critical section이라고 함
    6) critical section에 대한 동기화를 구현하지 않으면 오류가 발생할 수 있음
        - 동기화 (Syncronization) : 일종의 순차적 수행, 자원을 사용하고 있으면 다른 스레드가 사용하지 못하도록 lock 거는 것

4. 자바 Thread 만들기
    0) 스레드 실행을 위한 작업
        - 스레드 코드 작성 (run() 오버라이딩)
        - 스레드를 생성(new)하고 run()이 실행이 되도록 start()를 이용해 JVM에게 요청
    1) Thread 클래스 상속하여 만들기
    2) Runnable 인터페이스 구현하여 만들기
        - 자바는 다중 상속이 허용되지 않으므로 이미 다른 클래스를 상속한 경우 
          thread를 만들기 위해 Runnable 인터페이스를 구현하도록 함
    3) 람다식으로 Runnable 구현

5. Thread 주의사항
    1) run() 메서드가 종료되면 스레드는 종료됨
        - 스레드가 계속 살아있게 하려면 run() 메서드 내 무한루프 작성
        - 데몬(안죽는 프로그램)
    2) 한번 종료한 스레드는 다시 시작할 수 없음
    3) 한 스레드에서 다른 스레드를 강제로 종료시킬 수 있음

6. 스레드 상태(Thread Status)

7. 스레드 우선순위
    1) 최대값 = 10 (MAX_PRIORITY)
       최소값 = 1  (MIN_PRIORITY)
       보통값 = 5  (NORM_PRIORITY)
    
    2) 스레드 우선순위는 응용프로그램에서 변경 가능
    3) main() 스레드의 우선순위는 초기에 5
    4) JVM의 스케줄링 정책
        - 우선순위 기반
            - 가장 높은 우선순위의 스레드가 우선적으로 스케줄링 된다.
            - 동일한 우선순위의 스레드는 돌아가면서 스케줄링 (라운드 로빈)
    5) 우선순위가 높은 Thread가 CPU의 스케줄링을 받을 확률이 높다

8. join()
    1) 동시에 두 개 이상의 Thread가 될 때
       다른 Thread의 결과를 참조하여 실행해야 하는 경우 사용
    2) join() 함수를 호출한 Thread가 not-runnable 상태가 됨
    3) 호출된 Thread의 수행이 끝나면 join()을 호출한 Thread가 runnable 상태로 돌아옴

9. interrupt()
    1) 다른 Thread에 예외를 발생시키는 interrupt를 보냄
    2) Thread가 join(), sleep(), wait() 함수에 의해
       not-runnable 상태일 때, interrupt() 메서드를 호출하면 다시 runnable 상태가 될 수 있음

10. Thread 종료하기
    1) flag를 이용한 종료
        - 무한 반복의 경우 while(flag)의 flag 변수값을 false로 바꾸어 종료를 시킴

11. 스레드 동기화(Thread Syncronization)
    1) 다수 스레드가 공유 데이터에 동시에 접근하는 경우
        - 공유 데이터 값에 예상치 못한 결과가 발생 가능
    2) 공유 데이터를 접근하는 모든 스레드를 한 줄로 세우기
        - 한 스레드가 공유 데이터에 대한 작업을 끝낼 때까지 다른 스레드가 대기하도록 함
        - 다수의 스레드가 공유 데이터를 배타적으로 접근하기 위해 상호 협력하는 것
    3) 자바에서 스레드 동기화 방법
        - sychronized로 동기화 블록 지정
            - 한 스레드가 독점 실행해야 하는 부분(동기화 코드)를 표시하는 키워드
                - 임계 영역(critical section) 표시 키워드
        - wait-notify(), notifyAll() 메서드로 스레드 실행 순서를 제어
            - 동기화 메서드
                - wait()
                    - 다른 스레드가 notify()를 호출할 때까지 기다린다.
                - notify()
                    - wait()을 호출하여 대기중인 스레드를 깨우고
                      Runnable 상태로 만듦
                    - 2개 이상의 스레드가 대기중이라도 오직 한 스레드만 깨움
                - notifyAll()
                    - wait()을 호출하여 대기중인 모든 스레드를 깨우고 모두 Runnable 상태로 만듦
                - sychronized 블록 내에서만 사용되어야 함
                
                