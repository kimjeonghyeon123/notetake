1. 인터페이스(Interface)
    1) 모든 메서드가 추상 메서드로 선언됨
        - 메서드명 앞에 public abstract 생략 되어있음

    2) 모든 변수는 상수로 선언됨
        - 변수명 앞에 public static final 생략 되어있음

    3) interface 인터페이스이름 {
            public void makeSomething();
            public float pi = 3.14F;
       }

    4) 자바 8부터 디폴트 메서드(default method), 정적 메서드(static method) 등 일부 구현된 코드가 제공됨

2. 인터페이스 구현
    1) implements 예약어를 이용해서 코드 작성함
        - class B implements A {

          }

        - 클래스의 상속은 extends 예약어 사용
        - 인터페이스의 구현은 implements 예약어 사용

        - 다중 인터페이스 구현 가능
        - class B implements X, Y, Z {

          }
        
        - 상속과 인터페이스를 동시에 사용 가능
            - 먼저 상속 표시를 해주고, 뒤에서 인터페이스를 필요한 만큼 표시
        - class B extends A implements X, Y, Z{

          }

        - 인터페이스에 한해서 인터페이스 다중 상속이 됨
        - interface A extends X, Y, Z{

          }
    
3. 인터페이스의 역할
    1) 클래스나 프로그램이 제공하는 기능을 명시적으로 선언
    2) 일종의 클라이언트 코드와의 약속
    3) 클래스나 프로그램이 제공하는 명세(specification)
    4) 클라이언트 프로그램은 인터페이스에서 선언된 메서드 명세만 보고 이를 구현한 클래스를 사용할 수 있다.
    5) 인터페이스를 구현한 다양한 객체를 사용함 (다형성)

4. 인터페이스의 여러가지 요소
  1) 상수
      - 모든 변수는 상수로 변환됨 (public static final)

  2) 추상 메서드
      - 모든 메서드는 추상 메서드로 변환됨 (public abstract)

  3) 디폴트 메서드(java 8 이후)
      - 구현을 가지는 메서드
      - 인터페이스를 구현하는 클래스들에서 공통으로 사용할 수 있는 기본 메서드
      - default 키워드 작성
      - 기존 인터페이스에 새로운 기능을 추가할 수 있다.
      - 구현하는 클래스에서 재정의 할 수 있음
      - 쓰는 이유
      바로 "하위 호환성"때문이다. 예를 들어 설명하자면, 여러분들이 만약 오픈 소스코드를 만들었다고 가정하자. 
      그 오픈소스가 엄청 유명해져서 전 세계 사람들이 다 사용하고 있는데, 인터페이스에 새로운 메소드를 만들어야 하는 상황이 발생했다. 
      자칫 잘못하면 내가 만든 오픈소스를 사용한 사람들은 전부 오류가 발생하고 수정을 해야 하는 일이 발생할 수도 있다. 
      이럴 때 사용하는 것이 바로 default 메소드다.
      기존에 존재하던 인터페이스를 이용하여서 구현된 클래스를 만들고 사용하고 있는데 인터페이스를 보완하는 과정에서 
      추가적으로 구현해야 할 혹은 필수적으로 존재해야 할 메소드가 있다면, 
      이미 이 인터페이스를 구현한 클래스와의 호환성이 떨어 지게 됩니다. 
      이러한 경우 default 메소드를 추가하게 된다면 하위 호환성은 유지되고 인터페이스의 보완을 진행 할 수 있습니다.

      다음과 같이 InterfaceA를 상속받는 무수히 많은 클래스가 있습니다.
      그러면 일일이 모든 InterfaceA의 구현체 클래스에 추가되는 메서드 methodA를 구현해줘야 합니다.

  4) 정적(static) 메서드
      - 인스턴스 생성과 상관없이 인스턴스 타입으로 사용할 수 있다.

  5) private 메서드 (java 9 이후)
      - 인터페이스를 구현한 클래스에서 사용하거나 재정의 할 수 없음
      - 인터페이스 내부에서만 사용하기 위해 구현하는 메서드

5. 여러 인터페이스 구현하기, 인터페이스의 상속
  1) 여러 인터페이스 구현하기
    - 자바의 인터페이스는 구현 코드가 없으므로 하나의 클래스가 여러 인터페이스를 구현할 수 있다.
    - 디폴트 메서드가 중복되는 경우는 클래스에서 재정의해야 함
  
  2) 인터페이스의 상속
    - 인터페이스 사이에도 상속을 사용할 수 있음
    - extends 키워드를 사용
    - 인터페이스는 다중 상속이 가능하고 구현 코드의 상속이 아니고 타입 상속이라고 함
    
  3) 클래스 상속과 인터페이스 구현 함께 사용
    - 프레임워크와 오픈소스를 함께 연동되는 구현을 하게 됨
    - 클래스 상속과 인터페이스를 구현을 같이 사용하는 경우가 많음