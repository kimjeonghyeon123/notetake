1. 프로그래밍 방법론
    1) 절차식 프로그래밍
        - 초기의 컴퓨터 언어는 순차적인 명령을 수행하고 간단한 분기만 가능
    2) 구조적 프로그래밍
        - 특정 변수를 묶어 구조화하고 이를 통해 프로그래밍 효율을 높임
    3) 객체 지향 프로그래밍
        - 객체를 기반으로 프로그래밍되면 클래스, 속성, 동작 등의 현실세계의 모델을 반영함
    4) 함수형 프로그래밍
        - 객체의 형태를 벗어나 함수형을 확장해 함수를 변수처럼 사용 가능

2. 객체(Object)
    1) 실 세계(Real-world)
        - 객체는 어떤 상태 혹은 값이나 행동을 가지고 있음
    2) 컴퓨터 세계
        - 특정 일을 수행하기 위한 변수와 기능으로 이루어진 작은 프로그램의 집합체로 컴퓨터 메모리에 상주하며 필요시 사용됨.
        - 객체는 변수와 함수, 즉 프러퍼티와 메서드를 가지고 있으며 메모리에 생성된 상태임
        - 인스턴스라고도 부름

3. 객체지향 프로그램의 장점
    1) C, ASM
        - 빨리 만들어서 한저오딘 시간안에 요구기능을 구현
        - 단 기능 변경, 재사용이 어려움
        - 저수준 언어 및 절차지향
    2) Java, C++, Python, Kotlin 등
        - 빨리 만드는 것보다 요구사항 변경에 유연하게 대처하고 기능 변경, 재사용을 쉽게 하기 위한 것
        - 고수준 및 객체 지향 기법

4. 객체와 객체 지향 프로그래밍(OOP, Object Oriented Programming)
    1) 객체 (Object)
        - 구체적 데이터의 단위(물리적인 객체)
            - 예) 개, 고양이
        - 추상적 데이터의 단위(개념적인 객체)  
            - 예) 주문, 배송
    2) 절차 지향 프로그래밍 Vs 객체 지향 프로그래밍
        - 절차 지향 프로그래밍
            - 시간이나 사건의 흐름에 따른 프로그래밍
                - 일어난다 -> 씻는다 -> 밥을 먹는다 -> 버스 타고 -> ...
        - 객체 지향 프로그래밍
            - 객체를 정의(클래스로 구현)
            - 각 객체 제공하는 기능들을 구현
            - 각 객체가 제공하는 기능들 간의 메시지 전달

5. 클래스
    1) 객체와 관련된 데이터와 처리 동작을 한 데 모은 코드
    2) 어느 정도 특징적인 데이터와 동작으로 추려낼 필요가 있음
        - 추려내는 과정을 추상화(Abstraction), 일반화
        빌드 - 실행 파일로 만드는 것

toString() : 객체가 갖고있는 속성을 리턴











