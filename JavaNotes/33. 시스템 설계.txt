3. 설계 과정

    아키텍처 설계 => 서브 시스템 / => 컴포넌트 설계 => 자료구조
                    DB 설계                         / 알고리즘

4. 나올 수 있는 결과물
    1) Architecture diagram
    2) DataBase schema
    3) Sequence diagram
        - 시스템 / 객체 간 상호 작용 설계
    4) Class diagram
        - 상세 클래스 설계
    
5. 아키텍쳐 다이어그램 (Architecture diagram)
    1) 시스템 전체 구조
       시스템 간 상호 작용 및 의존성을 high-level에서 가시화 한 다이어그램
    
    2) 시스템이 어떤 순서로 요청을 처리하는지,
       어떤 시스템과 소통을 하는지 쉽게 이해하기 위해 사용

    3) 소프트웨어의 큰 구조/그림을 한 눈에 파악하기 위해 사용

    4) 소프트웨어의 규모가 크면 클수록 설계도의 중요도는 더 높아짐

    5) 구성 요소
        - 클라이언트
            - 웹, 모바일 앱 등
            - 내부 서비스
            - 외부 서비스
        - 데이터베이스, 스토리지

6. Sequence Diagram
    1) 객체 간의 상호 작용을 시간 순으로 시각화 한 다이어그램
    2) 시스템의 구조에 초점을 맞춘 것이 아니라
       시스템이 어떤 순서로 누구와 상호작용 하는지에 초점을 맞춘
       behavior diagram

    3) 왜 사용하나?
        - 코드를 보고 시스템의 흐름을 파악하기는 매우 오랜 시간이 걸리고 어려움
        - 시스템이 어떤 순서로 요청을 처리하는지,
          어떤 시스템과 소통을 하는지 쉽게 이해하기 위해 사용

    4) 언제 사용하나?
        - 요구사항이 수집되고, 각 시스템 혹은 객체 간의
          메시징을 정의하는 설계 단계에서
        - 요청을 처리하기 위해 여러 시스템 / 외부 서비스 간의 상호
          작용이 여러 차례 일어날 때
        - 새로운 시스템을 설계하거나 기존의 시스템을 확장할 때
    
    5) 어떻게 사용하나?
        - 구성 요소
            - 생명선(Lifeline)
                - 객체가 메모리 상에 얼마나 오래 살아있는지 나타내는 선
                - 아래로 내려갈수록 시간이 경과됨을 의미
            - 객체 / 참여자 (participant)
                - 사용자
                - 데이터베이스
                - 시스템
                - 클래스
            - 메시지 (message)
                - 
                - 
                - 