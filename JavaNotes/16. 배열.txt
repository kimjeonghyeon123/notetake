0. 자료 구조
    1) 대량 데이터를 효율적으로 관리하는 매커니즘

1. (1차원) 배열
    1) 동일한 자료현 여러 개의 값을 함께 저장할 수 있는 자료 구조
    2) 동일한 자료형의 순차적 자료 구조
    3) 물리적 위치와 논리적 위치가 동일함
    4) 자바에서 객체 배열을 구현한 ArrayList를 많이 사용

2. 배열 선언과 초기화
    1) 자료 한 개를 저장하는 공간을 위한 변수 사용
        int num = 0;
        
    2) 자료형[] 변수명 = { , , ...};
       자료형 변수명[] = { , , ...};
       자료형[] 변수명 = new 자료형[n]; // n개 배열 생성

3. 향상된 for문 상용하기
    for(배열타입 a : 배열 이름){

    }
       ex) char[] arr = new char[n];
           for(char x : arr){

           }

4. main() 메서드의 매개변수
    1) 개발자가 직접 호출하는 메서드는 아님
    2) JVM(Java Virtual Machine)이 프로그램 실행할 때 불리는 메서드임

5. 객체 배열 복사하기
    1) System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length)

    - 얕은 복사 
        - 객체 주소만 복사해 줌, 원본 객체를 변경하면 같이 변한다
        - 둘 다 같은 객체를 가리킴

    - 깊은 복사
        - 각각의 객체를 생성하여 그 객체의 값을 복사하여 서로 다른 객체를 가리킴


6. 객체 배열을 구현한 ArrayList를 많이 사용함

7. 배열의 문제점
    1) 저장할 수 있는 객체 수가 배열을 생성할 때 결정(정적)
    2) 불특정 다수의 객체를 저장하기에는 문제점이 있음

8. 2차원 배열
    1) 다차원
        - 이차원 이상으로 구현 된 배열
        - 평면(2차원 배열)이나 공간(3차원 배열)을 활용한 프로그램 구현

    2) 표현
        
        - int[][] arr1 = new int[n][m];
        

        - int[][] arr = new int[n][];
        
          for(int i = 0; i < n; i++){
              arr[i] = new int[m];
          }

9. ArrayList
    1) 기존의 배열 선언과 사용 방식은 배열의 길이를 정하고 요소의 개수가 길이보다 커지면 배열을 재할당하고 복사해야 했음
    
    2) ArrayList는 객체 배열을 좀 더 효율적으로 관리하기 위해 자바에서 제공해주는 클래스
        - 최적의 알고리즘으로 구현되어 있음
        - 각 메서드의 사용 방법만 익히면 유용하게 사용할 수 있음

    3) 주요 메서드
        - boolean add(E e)    : 요소 하나를 배열에 추가
                              : E는 요소의 자료형을 의미함
        
        - int size()          : 배열에 추가된 요소 전체 개수를 반환함
        
        - E get(int index)    : 배열의 index 위치에 있는 요소값 반환

        - E remove(int index) : 배열의 index 위치에 있는 요소값 제거함
                              : 그 값을 반환함

        - boolean isEmpty()   : 배열이 비어 있는지 확인함

