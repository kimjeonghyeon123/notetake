1. 다형성(Polymorphism)
    1) 하나의 코드가 여러 자료형으로 구현되어 실행되는 것
    2) 같은 코드에서 여러 실행 결과가 나옴
    3) 정보 은닉, 상속과 더불어 객체지향 프로그래밍의 가장 큰 특징 중 하나
    4) 다형성을 잘 활용하면 유연하고 확정성 있고, 유지보수가 편리한 프로그램을 만들 수 있음

2. 다형성을 사용하는 장점
    1) 기존 요구사항을 추가하는 경우 유연한 대처 가능
    2) 상속과 메서드 재정의를 활용하여 확장성 있는 프로그램을 만들 수 있음
    3) 코드의 유지 보수가 쉬워짐
    
3. 클래스간의 협력
    1) IS-A 관계 (is a relationship : inheritance)
        - 일반적인(general) 개념과 구체적인(specific) 개념과의 관계
        - 상위 클래스 : 하위 클래스보다 일반적인 개념
        - 하위 클래스 : 상위 클래스보다 구체적인 개념
        - 상속은 클래스 간의 결합도가 높은 관계
        - 상위 클래스의 수정이 많으면 하위 클래스에 영향을 미칠 수 있음
        - 계층구조가 복잡하거나 hierarchy가 높으면 좋지 않음

    2) HAS-A 관계 (composition)
        - 클래스가 다른 클래스를 포함하는 관계 (변수로 선언)
        - 코드 재사용의 가장 일반적인 방법
            - Student가 Subject를 포함하는 관계
            - Library를 구현할 때 ArrayList 생성하여 사용
        - 상속하지 않음

4. 다운 캐스팅(downcasting)
    1) 업캐스팅된 클래스를 다시 원래의 타입으로 형 변환 해주는 것
    2) 하위 클래스로의 형 변환은 명시적으로 해야 함
        - Parent x = new Child();  // 업   캐스팅(묵시적 형변환)
          Child  y = (Parent)x;    // 다운 캐스팅(명시적 형변환)
          
          Customer customerL    = new VIPCustomer();      // 업   캐스팅(묵시적)
          VIPCustomer vCustomer = (VIPCustomer)customerL; // 다운 캐스팅(명시적)

    3) instanceof를 이용하여 인스턴스의 형 체크
        - boolean 형
        - obj instanceof MyClass
          ---            -------
          ┗>클래스형 변수    ┗>클래스명



          