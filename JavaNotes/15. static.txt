1. 스태틱(static)
    1) static 변수, static 메서드는 메서드 영역에 저장됨
    2) 프로그램 시작 전에 로드되고
       프로그램 종료 시 소멸됨

2. static 변수
    1) 전역 변수로 사용
        - 어떤 객체에서도 접근해서 사용할 수 있음
        - 여러 인스턴스에서 공통으로 사용하는 변수

    2) 공통으로 사용하는 변수가 필요한 경우
        - 학생마다 새로운 학번 생성

    3) static 변수 선언과 사용
        - 인스턴스가 생성될 때 만들어지는 변수가아닌, 처음 프로그램이 로딩될 때 메모리를 할당
        - 정적 변수, 클래스 변수(VS 인스턴스 변수)
        - 인스턴스 생성과 상관 없이 사용 가능, 클래스 이름으로 직접 참조
            - public class CAR{
                static int a;
             }
              CAR.a = 3;
        - 메서드 영역 일부분을 사용하므로 메모리 사용이 비효율적
        - 객체가 가지고 있는 데이터들은 외부에서 함부로 접근하여 수정할 수 없도록 해야 한다는 OOP 원칙에 위배됨

3. static 메서드
    1) 클래스 이름으로 호출 가능
    2) 클래스 메서드, 정적 메서드
    3) static 메서드는 인스턴스 생성과 무관하게 클래스 이름으로 호출 가능
    4) 인스턴스 생성 전에 호출될 수 있으므로, static 메서드 내에서는 static 변수만 사용 가능, 인스턴스 변수 사용 불가

4. 디자인 패턴
    1) 경험이 중요
    2) GoF 가 23개 패턴을 제안

5. static 응용 : 싱글톤 패턴(singleton pattern)
    1) 클래스 인스턴스는 오직 하나임을 보장하며,
       이 인스턴스에 접근할 수 있는 방법을 제공하는 패턴
    2) 어떤 클래스 경우에는 정확히 하나의 인스턴스만을 갖도록 하는 것이 중요함
        - ex) Database에 연결하는 connection은 여러 개일 수 있지만,
              Connection pool은 한개
    3) 싱글톤 패턴으로 회사 객체 구현
        - 생성자는 private로 선언
        - 클래스 내부에 유일한 private 인스턴스 생성
        - 외부에서 유일한 인스턴스를 참조할 수 있는 public 메서드 제공

        - 주소값이 같음
        - ex)
            public class Company {
	
                private Company(){}
                private static Company instance = new Company();
                
                public static Company getInstance() {
                    if(instance == null) {
                        instance = new Company();
                    }
                    return instance;
                }
            }


            public class CompanyTest {
                public static void main(String[] args) {
                    Company company1 = Company.getInstance();
                    Company company2 = Company.getInstance();
                    
                    System.out.println(company1);
                    System.out.println(company2); // 같은 주소가 나옴 <=> 같은 객체라는 것을 의미함
                }
            }