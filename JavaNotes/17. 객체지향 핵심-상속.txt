1. 클래스 상속
    1) 새로운 클래스를 정의할 때 이미 구현된 클래스를 상속(inheritance) 
       받아서 속성이나 기능을 확장하여 클래스를 구현
    
    2) 이미 구현된 클래스보다 더 구체적인 기능을 가진 클래스를 구현해야 할 때
       기존 클래스를 상속함

    3) 상위(부모) 클래스의 속성과 기능은 그 하위(자식) 클래스에 물려줄 수 있음
        - 상위의 특징을 그대로 다시 사용
        - 부모가 자식의 특징을 사용할 수 없음

    4) 상위의 속성이나 기능을 하위에서 새로운 것으로 대체될 수 있음(Override)

    5) 하위 클래스에서는 새로운 속성이나 기능을 추가할 수 있음(확장)

    6) 용어
                상위 클래스 : Parent Class
                             Base Class
                             Super Class
                             Ancestor
                             
                하위 클래스 : Child Class
                             Derived Class
                             Sub Class
                             Descendant

    7) 상속의 문법
        - class B extends A { }
        - extends 키워드 뒤에는 단 하나의 클래스만 올 수 있음.
        - 자바는 단일 상속(single inheritance)만을 지원함

    8) 상속을 구현
        - 상위 클래스는 하위 클래스보다 더 일반적인 개념과 기능을 가짐
        - 하위 클래스는 상위 클래스보다 더 구체적인 개념과 기능을 가짐

    9) this와 super
        - 현재 사용 기준 클래스는 this를 통해 접근함
        - 기준 클래스의 상위는 super를 통해서 접근할 수 있음
    
    10) this(), super()
        - 해당 자신 혹은 상위의 생성자를 호출할 수 있음

2. 상속을 활용한 클래스 구현

3. 상속에서 클래스 생성 과정 & 형(Type) 변환
    1) 하위 클래스의 객체가 생성되는 과정
        - 하위 클래스를 생성하면 상위 클래스가 먼저 생성 됨
        - new VIPCustoomer()를 호출하면 Customer()가 먼저 호출 됨
        - 클래스가 상속 받은 경우 하위 클래스의 생성자에서는 반드시 상위 클래스 생성자 호출해주어야 한다.(생략 가능)
    
    2) super 키워드
        - 하위 클래스에서 가지는 상위 클래스에 대한 참조 값
        - super() 
            - 상위 클래스의 기본 생성자를 호출 함
            - 하위 클래스에서 명시적으로 상위 클래스의 생성자를 호출하지 않으면 super()가 자동으로 호출됨
                - 이 때 반드시 상위클래스의 기본 생성자가 존재해야 함

        - 상위 클래스의 기본 생성자가 없는 경우 (다른 생성자가 있는 경우)
            - 하위 클래스에서는 생성자에서는 super를 이용하여 명시적으로
              상위 클래스의 생성자를 호출 함
    
    3) 상속에서 인스턴스 메모리 상태
        - 항상 상위 클래스의 인스턴스가 먼저 생성되고,
          하위 클래스의 인스턴스가 생성 됨

    4) 형 변환 (업캐스팅, 자동 형변환)
        - 상위 클래스로 변수를 선언하고
          하위 클래스의 생성자로 인스턴스를 생성

          Customer customerL = new VIPCustomer();

        - 상위 클래스 타입의 변수에 하위 클래스 변수 대입
                            ___________
            int addCustomer(VIPCustomer vipCustomer){

            }
                            ___________
            int addCustomer(GoldCustomer goldCustomer){

            }

            └> 타입마다 별도로 만들어주어야 함

                            ________
            int addCustomer(Customer customer){

            }
            └> 부모 클래스로 하위클래스를 다 받을 수 있다.

        - 하위 클래스는 상위 클래스의 타입을 갖고 있으므로
          상위 클래스로의 자동(묵시적) 형변환이 가능하다.
        - 상속 관계에서 모든 하위 클래스는 상위 클래스로 형변환(업캐스팅)이 가능하다. 반대는 안됨

4. 메서드 재정의하기(overriding)
    1) 하위 클래스에서 매서드 재정의
        - overriding
            - 상위 클래스에서 정의된 메서드의 구현 내용이
              하위 클래스에서 구현할 내용과 맞지 않는 경우
              하위 클래스에서 동일한 이름의 메서들르 재정의 할 수 있음
    
    2) 애노테이션 (annotation)
        - 애노테이션은 원래 주석이라는 의미
        - 컴파일러에게 특별한 정보를 제공해주는 역할

        - @Override : 재정의된 메서드라는 정보 제공